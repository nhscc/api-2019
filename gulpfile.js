"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.regenerate = exports.checkEnv = void 0;

var _path = require("path");

var _core = require("@babel/core");

var _gulp = _interopRequireDefault(require("gulp"));

var _gulpTap = _interopRequireDefault(require("gulp-tap"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  populateEnv
} = require('./src/dev-utils');

const regenTargets = [`config/*.[jt]s`];

const checkEnv = async () => populateEnv();

exports.checkEnv = checkEnv;
checkEnv.description = `Throws an error if any expected environment variables are not properly set ` + `(see expectedEnvVariables key in package.json)`;

const regenerate = () => {
  populateEnv();
  (0, _fancyLog.default)(`Regenerating targets: "${regenTargets.join('" "')}"`);
  process.env.BABEL_ENV = 'generator';
  return _gulp.default.src(regenTargets).pipe((0, _gulpTap.default)(file => {
    var _babel;

    file.contents = file.contents && Buffer.from(((_babel = (0, _core.transformSync)(file.contents.toString('utf8'), {
      filename: file.path,
      sourceFileName: (0, _path.relative)(__dirname, file.path)
    })) === null || _babel === void 0 ? void 0 : _babel.code) || '');
    const name = (0, _path.basename)(file.basename, '.ts');
    file.basename = name == file.basename ? name : `${name}.js`;
  })).pipe(_gulp.default.dest('.'));
};

exports.regenerate = regenerate;
regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9ndWxwZmlsZS50cyJdLCJuYW1lcyI6WyJwb3B1bGF0ZUVudiIsInJlcXVpcmUiLCJyZWdlblRhcmdldHMiLCJjaGVja0VudiIsImRlc2NyaXB0aW9uIiwicmVnZW5lcmF0ZSIsImpvaW4iLCJwcm9jZXNzIiwiZW52IiwiQkFCRUxfRU5WIiwiZ3VscCIsInNyYyIsInBpcGUiLCJmaWxlIiwiY29udGVudHMiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJmaWxlbmFtZSIsInBhdGgiLCJzb3VyY2VGaWxlTmFtZSIsIl9fZGlybmFtZSIsImNvZGUiLCJuYW1lIiwiYmFzZW5hbWUiLCJkZXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFLQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBa0JDLE9BQU8sQ0FBQyxpQkFBRCxDQUEvQjs7QUFFQSxNQUFNQyxZQUFZLEdBQUcsQ0FDaEIsZ0JBRGdCLENBQXJCOztBQU1PLE1BQU1DLFFBQVEsR0FBRyxZQUEyQkgsV0FBVyxFQUF2RDs7O0FBRVBHLFFBQVEsQ0FBQ0MsV0FBVCxHQUF3Qiw2RUFBRCxHQUNoQixnREFEUDs7QUFTTyxNQUFNQyxVQUFVLEdBQUcsTUFBOEI7QUFDcERMLEVBQUFBLFdBQVc7QUFFWCx5QkFBSywwQkFBeUJFLFlBQVksQ0FBQ0ksSUFBYixDQUFrQixLQUFsQixDQUF5QixHQUF2RDtBQUVBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsU0FBWixHQUF3QixXQUF4QjtBQUVBLFNBQU9DLGNBQUtDLEdBQUwsQ0FBU1QsWUFBVCxFQUNGVSxJQURFLENBQ0csc0JBQUlDLElBQUksSUFBSTtBQUFBOztBQUNkQSxJQUFBQSxJQUFJLENBQUNDLFFBQUwsR0FBZ0JELElBQUksQ0FBQ0MsUUFBTCxJQUFpQkMsTUFBTSxDQUFDQyxJQUFQLENBQVksb0NBQU1ILElBQUksQ0FBQ0MsUUFBTCxDQUFjRyxRQUFkLENBQXVCLE1BQXZCLENBQU4sRUFBc0M7QUFDL0VDLE1BQUFBLFFBQVEsRUFBRUwsSUFBSSxDQUFDTSxJQURnRTtBQUUvRUMsTUFBQUEsY0FBYyxFQUFFLG9CQUFJQyxTQUFKLEVBQWVSLElBQUksQ0FBQ00sSUFBcEI7QUFGK0QsS0FBdEMsbURBR3pDRyxJQUh5QyxLQUdqQyxFQUhxQixDQUFqQztBQUtBLFVBQU1DLElBQUksR0FBRyxvQkFBU1YsSUFBSSxDQUFDVyxRQUFkLEVBQXdCLEtBQXhCLENBQWI7QUFDQVgsSUFBQUEsSUFBSSxDQUFDVyxRQUFMLEdBQWdCRCxJQUFJLElBQUlWLElBQUksQ0FBQ1csUUFBYixHQUF3QkQsSUFBeEIsR0FBZ0MsR0FBRUEsSUFBSyxLQUF2RDtBQUNILEdBUkssQ0FESCxFQVVGWCxJQVZFLENBVUdGLGNBQUtlLElBQUwsQ0FBVSxHQUFWLENBVkgsQ0FBUDtBQVdILENBbEJNOzs7QUFvQlBwQixVQUFVLENBQUNELFdBQVgsR0FBeUIseUZBQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPyBUbyByZWdlbmVyYXRlIHRoaXMgZmlsZSAoaS5lLiBpZiB5b3UgY2hhbmdlZCBpdCBhbmQgd2FudCB5b3VyIGNoYW5nZXMgdG9cbi8vID8gYmUgcGVybWFuZW50KSwgY2FsbCBgbnBtIHJ1biByZWdlbmVyYXRlYCBhZnRlcndhcmRzXG5cbi8vICEgQmUgc3VyZSB0aGF0IHRhc2tzIGV4cGVjdGVkIHRvIHJ1biBvbiBucG0gaW5zdGFsbCAobWFya2VkIEBkZXBlbmRlbnQpIGhhdmVcbi8vICEgYWxsIHJlcXVpcmVkIHBhY2thZ2VzIGxpc3RlZCB1bmRlciBcImRlcGVuZGVuY2llc1wiIGluc3RlYWQgb2Zcbi8vICEgXCJkZXZEZXBlbmRlbmNpZXNcIiBpbiB0aGlzIHByb2plY3QncyBwYWNrYWdlLmpzb25cblxuaW1wb3J0IHsgcmVsYXRpdmUgYXMgcmVsLCBiYXNlbmFtZSB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgeyB0cmFuc2Zvcm1TeW5jIGFzIGJhYmVsIH0gZnJvbSAnQGJhYmVsL2NvcmUnXG5pbXBvcnQgZ3VscCBmcm9tICdndWxwJ1xuaW1wb3J0IHRhcCBmcm9tICdndWxwLXRhcCdcbmltcG9ydCBsb2cgZnJvbSAnZmFuY3ktbG9nJ1xuXG4vLyA/IE5vdCB1c2luZyBFUzYvVFMgaW1wb3J0IHN5bnRheCBoZXJlIGJlY2F1c2UgZGV2LXV0aWxzIGhhcyBzcGVjaWFsXG4vLyA/IGNpcmN1bXN0YW5jZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZCwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgeyBwb3B1bGF0ZUVudiB9ID0gcmVxdWlyZSgnLi9zcmMvZGV2LXV0aWxzJyk7XG5cbmNvbnN0IHJlZ2VuVGFyZ2V0cyA9IFtcbiAgICBgY29uZmlnLyouW2p0XXNgXG5dO1xuXG4vLyAqIENIRUNLRU5WXG5cbmV4cG9ydCBjb25zdCBjaGVja0VudiA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHBvcHVsYXRlRW52KCk7XG5cbmNoZWNrRW52LmRlc2NyaXB0aW9uID0gYFRocm93cyBhbiBlcnJvciBpZiBhbnkgZXhwZWN0ZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBub3QgcHJvcGVybHkgc2V0IGBcbiAgICArIGAoc2VlIGV4cGVjdGVkRW52VmFyaWFibGVzIGtleSBpbiBwYWNrYWdlLmpzb24pYDtcblxuLy8gKiBSRUdFTkVSQVRFXG5cbi8vID8gSWYgeW91IGNoYW5nZSB0aGlzIGZ1bmN0aW9uLCBydW4gYG5wbSBydW4gcmVnZW5lcmF0ZWAgdHdpY2U6IG9uY2UgdG9cbi8vID8gY29tcGlsZSB0aGlzIG5ldyBmdW5jdGlvbiBhbmQgb25jZSBhZ2FpbiB0byBjb21waWxlIGl0c2VsZiB3aXRoIHRoZSBuZXdseVxuLy8gPyBjb21waWxlZCBsb2dpYy4gSWYgdGhlcmUgaXMgYW4gZXJyb3IgdGhhdCBwcmV2ZW50cyByZWdlbmVyYXRpb24sIHlvdSBjYW5cbi8vID8gcnVuIGBucG0gcnVuIGdlbmVyYXRlYCB0aGVuIGBucG0gcnVuIHJlZ2VuZXJhdGVgIGluc3RlYWQuXG5leHBvcnQgY29uc3QgcmVnZW5lcmF0ZSA9ICgpOiBOb2RlSlMuUmVhZFdyaXRlU3RyZWFtID0+IHtcbiAgICBwb3B1bGF0ZUVudigpO1xuXG4gICAgbG9nKGBSZWdlbmVyYXRpbmcgdGFyZ2V0czogXCIke3JlZ2VuVGFyZ2V0cy5qb2luKCdcIiBcIicpfVwiYCk7XG5cbiAgICBwcm9jZXNzLmVudi5CQUJFTF9FTlYgPSAnZ2VuZXJhdG9yJztcblxuICAgIHJldHVybiBndWxwLnNyYyhyZWdlblRhcmdldHMpXG4gICAgICAgIC5waXBlKHRhcChmaWxlID0+IHtcbiAgICAgICAgICAgIGZpbGUuY29udGVudHMgPSBmaWxlLmNvbnRlbnRzICYmIEJ1ZmZlci5mcm9tKGJhYmVsKGZpbGUuY29udGVudHMudG9TdHJpbmcoJ3V0ZjgnKSwge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlLnBhdGgsXG4gICAgICAgICAgICAgICAgc291cmNlRmlsZU5hbWU6IHJlbChfX2Rpcm5hbWUsIGZpbGUucGF0aClcbiAgICAgICAgICAgIH0pPy5jb2RlIHx8ICcnKTtcblxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGJhc2VuYW1lKGZpbGUuYmFzZW5hbWUsICcudHMnKTtcbiAgICAgICAgICAgIGZpbGUuYmFzZW5hbWUgPSBuYW1lID09IGZpbGUuYmFzZW5hbWUgPyBuYW1lIDogYCR7bmFtZX0uanNgO1xuICAgICAgICB9KSlcbiAgICAgICAgLnBpcGUoZ3VscC5kZXN0KCcuJykpO1xufTtcblxucmVnZW5lcmF0ZS5kZXNjcmlwdGlvbiA9ICdJbnZva2VzIGJhYmVsIG9uIHRoZSBmaWxlcyBpbiBjb25maWcsIHRyYW5zcGlsaW5nIHRoZW0gaW50byB0aGVpciBwcm9qZWN0IHJvb3QgdmVyc2lvbnMnO1xuIl19