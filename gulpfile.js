/* eslint-disable */
/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.[jt]s versions
* ! of this file to make permanent modifications!
*/

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.regenerate = exports.checkEnv = void 0;

require("source-map-support/register");

var _path = require("path");

var _core = require("@babel/core");

var _gulp = _interopRequireDefault(require("gulp"));

var _gulpTap = _interopRequireDefault(require("gulp-tap"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  populateEnv
} = require('./src/dev-utils');

const regenTargets = [`config/*.[jt]s`];
const CLI_BANNER = `/* eslint-disable */\n/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.[jt]s versions
* ! of this file to make permanent modifications!
*/\n\n`;

const checkEnv = async () => populateEnv();

exports.checkEnv = checkEnv;
checkEnv.description = `Throws an error if any expected environment variables are not properly set ` + `(see expectedEnvVariables key in package.json)`;

const regenerate = () => {
  populateEnv();
  (0, _fancyLog.default)(`Regenerating targets: "${regenTargets.join('" "')}"`);
  process.env.BABEL_ENV = 'generator';
  return _gulp.default.src(regenTargets).pipe((0, _gulpTap.default)(file => {
    var _babel;

    file.contents = file.contents && Buffer.concat([Buffer.from(CLI_BANNER), Buffer.from(((_babel = (0, _core.transformSync)(file.contents.toString(), {
      filename: file.path,
      sourceFileName: (0, _path.relative)(__dirname, file.path)
    })) === null || _babel === void 0 ? void 0 : _babel.code) || '')]);
    const name = (0, _path.basename)(file.basename, '.ts');
    file.basename = name == file.basename ? name : `${name}.js`;
  })).pipe(_gulp.default.dest('.'));
};

exports.regenerate = regenerate;
regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9ndWxwZmlsZS50cyJdLCJuYW1lcyI6WyJwb3B1bGF0ZUVudiIsInJlcXVpcmUiLCJyZWdlblRhcmdldHMiLCJDTElfQkFOTkVSIiwiY2hlY2tFbnYiLCJkZXNjcmlwdGlvbiIsInJlZ2VuZXJhdGUiLCJqb2luIiwicHJvY2VzcyIsImVudiIsIkJBQkVMX0VOViIsImd1bHAiLCJzcmMiLCJwaXBlIiwiZmlsZSIsImNvbnRlbnRzIiwiQnVmZmVyIiwiY29uY2F0IiwiZnJvbSIsInRvU3RyaW5nIiwiZmlsZW5hbWUiLCJwYXRoIiwic291cmNlRmlsZU5hbWUiLCJfX2Rpcm5hbWUiLCJjb2RlIiwibmFtZSIsImJhc2VuYW1lIiwiZGVzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBT0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFLQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBa0JDLE9BQU8sQ0FBQyxpQkFBRCxDQUEvQjs7QUFFQSxNQUFNQyxZQUFZLEdBQUcsQ0FDaEIsZ0JBRGdCLENBQXJCO0FBSUEsTUFBTUMsVUFBVSxHQUFJOzs7O09BQXBCOztBQVFPLE1BQU1DLFFBQVEsR0FBRyxZQUEyQkosV0FBVyxFQUF2RDs7O0FBRVBJLFFBQVEsQ0FBQ0MsV0FBVCxHQUF3Qiw2RUFBRCxHQUNoQixnREFEUDs7QUFTTyxNQUFNQyxVQUFVLEdBQUcsTUFBOEI7QUFDcEROLEVBQUFBLFdBQVc7QUFFWCx5QkFBSywwQkFBeUJFLFlBQVksQ0FBQ0ssSUFBYixDQUFrQixLQUFsQixDQUF5QixHQUF2RDtBQUVBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsU0FBWixHQUF3QixXQUF4QjtBQUVBLFNBQU9DLGNBQUtDLEdBQUwsQ0FBU1YsWUFBVCxFQUNGVyxJQURFLENBQ0csc0JBQUlDLElBQUksSUFBSTtBQUFBOztBQUNkQSxJQUFBQSxJQUFJLENBQUNDLFFBQUwsR0FBZ0JELElBQUksQ0FBQ0MsUUFBTCxJQUFpQkMsTUFBTSxDQUFDQyxNQUFQLENBQWMsQ0FDM0NELE1BQU0sQ0FBQ0UsSUFBUCxDQUFZZixVQUFaLENBRDJDLEVBRTNDYSxNQUFNLENBQUNFLElBQVAsQ0FBWSxvQ0FBTUosSUFBSSxDQUFDQyxRQUFMLENBQWNJLFFBQWQsRUFBTixFQUFnQztBQUN4Q0MsTUFBQUEsUUFBUSxFQUFFTixJQUFJLENBQUNPLElBRHlCO0FBRXhDQyxNQUFBQSxjQUFjLEVBQUUsb0JBQUlDLFNBQUosRUFBZVQsSUFBSSxDQUFDTyxJQUFwQjtBQUZ3QixLQUFoQyxtREFHUkcsSUFIUSxLQUdBLEVBSFosQ0FGMkMsQ0FBZCxDQUFqQztBQVFBLFVBQU1DLElBQUksR0FBRyxvQkFBU1gsSUFBSSxDQUFDWSxRQUFkLEVBQXdCLEtBQXhCLENBQWI7QUFDQVosSUFBQUEsSUFBSSxDQUFDWSxRQUFMLEdBQWdCRCxJQUFJLElBQUlYLElBQUksQ0FBQ1ksUUFBYixHQUF3QkQsSUFBeEIsR0FBZ0MsR0FBRUEsSUFBSyxLQUF2RDtBQUNILEdBWEssQ0FESCxFQWFGWixJQWJFLENBYUdGLGNBQUtnQixJQUFMLENBQVUsR0FBVixDQWJILENBQVA7QUFjSCxDQXJCTTs7O0FBdUJQckIsVUFBVSxDQUFDRCxXQUFYLEdBQXlCLHlGQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIi8vID8gVG8gcmVnZW5lcmF0ZSB0aGlzIGZpbGUgKGkuZS4gaWYgeW91IGNoYW5nZWQgaXQgYW5kIHdhbnQgeW91ciBjaGFuZ2VzIHRvXG4vLyA/IGJlIHBlcm1hbmVudCksIGNhbGwgYG5wbSBydW4gcmVnZW5lcmF0ZWAgYWZ0ZXJ3YXJkc1xuXG4vLyAhIEJlIHN1cmUgdGhhdCB0YXNrcyBleHBlY3RlZCB0byBydW4gb24gbnBtIGluc3RhbGwgKG1hcmtlZCBAZGVwZW5kZW50KSBoYXZlXG4vLyAhIGFsbCByZXF1aXJlZCBwYWNrYWdlcyBsaXN0ZWQgdW5kZXIgXCJkZXBlbmRlbmNpZXNcIiBpbnN0ZWFkIG9mXG4vLyAhIFwiZGV2RGVwZW5kZW5jaWVzXCIgaW4gdGhpcyBwcm9qZWN0J3MgcGFja2FnZS5qc29uXG5cbmltcG9ydCB7IHJlbGF0aXZlIGFzIHJlbCwgYmFzZW5hbWUgfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgdHJhbnNmb3JtU3luYyBhcyBiYWJlbCB9IGZyb20gJ0BiYWJlbC9jb3JlJ1xuaW1wb3J0IGd1bHAgZnJvbSAnZ3VscCdcbmltcG9ydCB0YXAgZnJvbSAnZ3VscC10YXAnXG5pbXBvcnQgbG9nIGZyb20gJ2ZhbmN5LWxvZydcblxuLy8gPyBOb3QgdXNpbmcgRVM2L1RTIGltcG9ydCBzeW50YXggaGVyZSBiZWNhdXNlIGRldi11dGlscyBoYXMgc3BlY2lhbFxuLy8gPyBjaXJjdW1zdGFuY2VzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVucmVzb2x2ZWQsIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbmNvbnN0IHsgcG9wdWxhdGVFbnYgfSA9IHJlcXVpcmUoJy4vc3JjL2Rldi11dGlscycpO1xuXG5jb25zdCByZWdlblRhcmdldHMgPSBbXG4gICAgYGNvbmZpZy8qLltqdF1zYFxuXTtcblxuY29uc3QgQ0xJX0JBTk5FUiA9IGAvKiBlc2xpbnQtZGlzYWJsZSAqL1xcbi8qKlxuKiAhISEgRE8gTk9UIEVESVQgVEhJUyBGSUxFIERJUkVDVExZICEhIVxuKiAhIFRoaXMgZmlsZSBoYXMgYmVlbiBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS4gU2VlIHRoZSBjb25maWcvKi5banRdcyB2ZXJzaW9uc1xuKiAhIG9mIHRoaXMgZmlsZSB0byBtYWtlIHBlcm1hbmVudCBtb2RpZmljYXRpb25zIVxuKi9cXG5cXG5gO1xuXG4vLyAqIENIRUNLRU5WXG5cbmV4cG9ydCBjb25zdCBjaGVja0VudiA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHBvcHVsYXRlRW52KCk7XG5cbmNoZWNrRW52LmRlc2NyaXB0aW9uID0gYFRocm93cyBhbiBlcnJvciBpZiBhbnkgZXhwZWN0ZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBub3QgcHJvcGVybHkgc2V0IGBcbiAgICArIGAoc2VlIGV4cGVjdGVkRW52VmFyaWFibGVzIGtleSBpbiBwYWNrYWdlLmpzb24pYDtcblxuLy8gKiBSRUdFTkVSQVRFXG5cbi8vID8gSWYgeW91IGNoYW5nZSB0aGlzIGZ1bmN0aW9uLCBydW4gYG5wbSBydW4gcmVnZW5lcmF0ZWAgdHdpY2U6IG9uY2UgdG9cbi8vID8gY29tcGlsZSB0aGlzIG5ldyBmdW5jdGlvbiBhbmQgb25jZSBhZ2FpbiB0byBjb21waWxlIGl0c2VsZiB3aXRoIHRoZSBuZXdseVxuLy8gPyBjb21waWxlZCBsb2dpYy4gSWYgdGhlcmUgaXMgYW4gZXJyb3IgdGhhdCBwcmV2ZW50cyByZWdlbmVyYXRpb24sIHlvdSBjYW5cbi8vID8gcnVuIGBucG0gcnVuIGdlbmVyYXRlYCB0aGVuIGBucG0gcnVuIHJlZ2VuZXJhdGVgIGluc3RlYWQuXG5leHBvcnQgY29uc3QgcmVnZW5lcmF0ZSA9ICgpOiBOb2RlSlMuUmVhZFdyaXRlU3RyZWFtID0+IHtcbiAgICBwb3B1bGF0ZUVudigpO1xuXG4gICAgbG9nKGBSZWdlbmVyYXRpbmcgdGFyZ2V0czogXCIke3JlZ2VuVGFyZ2V0cy5qb2luKCdcIiBcIicpfVwiYCk7XG5cbiAgICBwcm9jZXNzLmVudi5CQUJFTF9FTlYgPSAnZ2VuZXJhdG9yJztcblxuICAgIHJldHVybiBndWxwLnNyYyhyZWdlblRhcmdldHMpXG4gICAgICAgIC5waXBlKHRhcChmaWxlID0+IHtcbiAgICAgICAgICAgIGZpbGUuY29udGVudHMgPSBmaWxlLmNvbnRlbnRzICYmIEJ1ZmZlci5jb25jYXQoW1xuICAgICAgICAgICAgICAgIEJ1ZmZlci5mcm9tKENMSV9CQU5ORVIpLFxuICAgICAgICAgICAgICAgIEJ1ZmZlci5mcm9tKGJhYmVsKGZpbGUuY29udGVudHMudG9TdHJpbmcoKSwge1xuICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogZmlsZS5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VGaWxlTmFtZTogcmVsKF9fZGlybmFtZSwgZmlsZS5wYXRoKVxuICAgICAgICAgICAgICAgIH0pPy5jb2RlIHx8ICcnKVxuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBiYXNlbmFtZShmaWxlLmJhc2VuYW1lLCAnLnRzJyk7XG4gICAgICAgICAgICBmaWxlLmJhc2VuYW1lID0gbmFtZSA9PSBmaWxlLmJhc2VuYW1lID8gbmFtZSA6IGAke25hbWV9LmpzYDtcbiAgICAgICAgfSkpXG4gICAgICAgIC5waXBlKGd1bHAuZGVzdCgnLicpKTtcbn07XG5cbnJlZ2VuZXJhdGUuZGVzY3JpcHRpb24gPSAnSW52b2tlcyBiYWJlbCBvbiB0aGUgZmlsZXMgaW4gY29uZmlnLCB0cmFuc3BpbGluZyB0aGVtIGludG8gdGhlaXIgcHJvamVjdCByb290IHZlcnNpb25zJztcbiJdfQ==