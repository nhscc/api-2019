/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

require("source-map-support/register");

var _bundleAnalyzer = _interopRequireDefault(require("@next/bundle-analyzer"));

var _dotenvWebpack = _interopRequireDefault(require("dotenv-webpack"));

var _devUtils = require("./src/dev-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _devUtils.populateEnv)();
const {
  BUNDLE_ANALYZE
} = process.env;
const paths = {
  universe: `${__dirname}/src/`,
  multiverse: `${__dirname}/lib/`
};

module.exports = () => {
  return (0, _bundleAnalyzer.default)({
    distDir: 'build',
    analyzeServer: ['server', 'both'].includes(BUNDLE_ANALYZE),
    analyzeBrowser: ['browser', 'both'].includes(BUNDLE_ANALYZE),
    bundleAnalyzerConfig: {
      server: {
        analyzerMode: 'static',
        reportFilename: 'bundle-analysis-server.html'
      },
      browser: {
        analyzerMode: 'static',
        reportFilename: 'bundle-analysis-client.html'
      }
    },
    webpack: (config, {
      isServer
    }) => {
      config.resolve.alias = Object.assign({}, config.resolve.alias, {
        universe: paths.universe,
        multiverse: paths.multiverse
      });

      if (isServer) {
        config.plugins.push(new _dotenvWebpack.default());
      }

      return config;
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9uZXh0LmNvbmZpZy5qcyJdLCJuYW1lcyI6WyJCVU5ETEVfQU5BTFlaRSIsInByb2Nlc3MiLCJlbnYiLCJwYXRocyIsInVuaXZlcnNlIiwiX19kaXJuYW1lIiwibXVsdGl2ZXJzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkaXN0RGlyIiwiYW5hbHl6ZVNlcnZlciIsImluY2x1ZGVzIiwiYW5hbHl6ZUJyb3dzZXIiLCJidW5kbGVBbmFseXplckNvbmZpZyIsInNlcnZlciIsImFuYWx5emVyTW9kZSIsInJlcG9ydEZpbGVuYW1lIiwiYnJvd3NlciIsIndlYnBhY2siLCJjb25maWciLCJpc1NlcnZlciIsInJlc29sdmUiLCJhbGlhcyIsIk9iamVjdCIsImFzc2lnbiIsInBsdWdpbnMiLCJwdXNoIiwiRG90ZW52V2VicGFja1BsdWdpbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUE7QUFFQSxNQUFNO0FBQ0ZBLEVBQUFBO0FBREUsSUFFRkMsT0FBTyxDQUFDQyxHQUZaO0FBSUEsTUFBTUMsS0FBSyxHQUFHO0FBQ1ZDLEVBQUFBLFFBQVEsRUFBRyxHQUFFQyxTQUFVLE9BRGI7QUFFVkMsRUFBQUEsVUFBVSxFQUFHLEdBQUVELFNBQVU7QUFGZixDQUFkOztBQUtBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsTUFBb0Q7QUFDakUsU0FBTyw2QkFBbUI7QUFFdEJDLElBQUFBLE9BQU8sRUFBRSxPQUZhO0FBS3RCQyxJQUFBQSxhQUFhLEVBQUUsQ0FBQyxRQUFELEVBQVcsTUFBWCxFQUFtQkMsUUFBbkIsQ0FBNEJYLGNBQTVCLENBTE87QUFNdEJZLElBQUFBLGNBQWMsRUFBRSxDQUFDLFNBQUQsRUFBWSxNQUFaLEVBQW9CRCxRQUFwQixDQUE2QlgsY0FBN0IsQ0FOTTtBQU90QmEsSUFBQUEsb0JBQW9CLEVBQUU7QUFDbEJDLE1BQUFBLE1BQU0sRUFBRTtBQUNKQyxRQUFBQSxZQUFZLEVBQUUsUUFEVjtBQUVKQyxRQUFBQSxjQUFjLEVBQUU7QUFGWixPQURVO0FBS2xCQyxNQUFBQSxPQUFPLEVBQUU7QUFDTEYsUUFBQUEsWUFBWSxFQUFFLFFBRFQ7QUFFTEMsUUFBQUEsY0FBYyxFQUFFO0FBRlg7QUFMUyxLQVBBO0FBcUJ0QkUsSUFBQUEsT0FBTyxFQUFFLENBQUNDLE1BQUQsRUFBaUI7QUFBRUMsTUFBQUE7QUFBRixLQUFqQixLQUEwQztBQUkvQ0QsTUFBQUEsTUFBTSxDQUFDRSxPQUFQLENBQWVDLEtBQWYsR0FBdUJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JMLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlQyxLQUFqQyxFQUF3QztBQUMzRGxCLFFBQUFBLFFBQVEsRUFBRUQsS0FBSyxDQUFDQyxRQUQyQztBQUUzREUsUUFBQUEsVUFBVSxFQUFFSCxLQUFLLENBQUNHO0FBRnlDLE9BQXhDLENBQXZCOztBQUtBLFVBQUdjLFFBQUgsRUFBYTtBQUVURCxRQUFBQSxNQUFNLENBQUNNLE9BQVAsQ0FBZUMsSUFBZixDQUFvQixJQUFJQyxzQkFBSixFQUFwQjtBQUNIOztBQUVELGFBQU9SLE1BQVA7QUFDSDtBQXBDcUIsR0FBbkIsQ0FBUDtBQXNDSCxDQXZDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB3aXRoQnVuZGxlQW5hbHl6ZXIgZnJvbSAnQG5leHQvYnVuZGxlLWFuYWx5emVyJ1xuaW1wb3J0IERvdGVudldlYnBhY2tQbHVnaW4gZnJvbSAnZG90ZW52LXdlYnBhY2snXG5pbXBvcnQgeyBwb3B1bGF0ZUVudiB9IGZyb20gJy4vc3JjL2Rldi11dGlscydcblxucG9wdWxhdGVFbnYoKTtcblxuY29uc3Qge1xuICAgIEJVTkRMRV9BTkFMWVpFXG59ID0gcHJvY2Vzcy5lbnY7XG5cbmNvbnN0IHBhdGhzID0ge1xuICAgIHVuaXZlcnNlOiBgJHtfX2Rpcm5hbWV9L3NyYy9gLFxuICAgIG11bHRpdmVyc2U6IGAke19fZGlybmFtZX0vbGliL2AsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgvKiBwaGFzZTogc3RyaW5nLCB7IGRlZmF1bHRDb25maWcgfTogT2JqZWN0ICovKSA9PiB7XG4gICAgcmV0dXJuIHdpdGhCdW5kbGVBbmFseXplcih7XG4gICAgICAgIC8vID8gUmVuYW1lcyB0aGUgYnVpbGQgZGlyIFwiYnVpbGRcIiBpbnN0ZWFkIG9mIFwiLm5leHRcIlxuICAgICAgICBkaXN0RGlyOiAnYnVpbGQnLFxuXG4gICAgICAgIC8vID8gU2VsZWN0aXZlbHkgZW5hYmxlcyBidW5kbGUgYW5hbHlzaXMuIFNlZSBkaXN0LmVudiBvciBSRUFETUUgZm9yIGRldGFpbHNcbiAgICAgICAgYW5hbHl6ZVNlcnZlcjogWydzZXJ2ZXInLCAnYm90aCddLmluY2x1ZGVzKEJVTkRMRV9BTkFMWVpFKSxcbiAgICAgICAgYW5hbHl6ZUJyb3dzZXI6IFsnYnJvd3NlcicsICdib3RoJ10uaW5jbHVkZXMoQlVORExFX0FOQUxZWkUpLFxuICAgICAgICBidW5kbGVBbmFseXplckNvbmZpZzoge1xuICAgICAgICAgICAgc2VydmVyOiB7XG4gICAgICAgICAgICAgICAgYW5hbHl6ZXJNb2RlOiAnc3RhdGljJyxcbiAgICAgICAgICAgICAgICByZXBvcnRGaWxlbmFtZTogJ2J1bmRsZS1hbmFseXNpcy1zZXJ2ZXIuaHRtbCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBicm93c2VyOiB7XG4gICAgICAgICAgICAgICAgYW5hbHl6ZXJNb2RlOiAnc3RhdGljJyxcbiAgICAgICAgICAgICAgICByZXBvcnRGaWxlbmFtZTogJ2J1bmRsZS1hbmFseXNpcy1jbGllbnQuaHRtbCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyA/IFdlYnBhY2sgY29uZmlndXJhdGlvblxuICAgICAgICAvLyAhIE5vdGUgdGhhdCB0aGUgd2VicGFjayBjb25maWd1cmF0aW9uIGlzIGV4ZWN1dGVkIHR3aWNlOiBvbmNlXG4gICAgICAgIC8vICEgc2VydmVyLXNpZGUgYW5kIG9uY2UgY2xpZW50LXNpZGUhXG4gICAgICAgIHdlYnBhY2s6IChjb25maWc6IE9iamVjdCwgeyBpc1NlcnZlciB9OiBPYmplY3QpID0+IHtcbiAgICAgICAgICAgIC8vID8gVGhlc2UgYXJlIGFsaWFzZXMgdGhhdCBjYW4gYmUgdXNlZCBkdXJpbmcgSlMgaW1wb3J0IGNhbGxzXG4gICAgICAgICAgICAvLyAhIE5vdGUgdGhhdCB5b3UgbXVzdCBhbHNvIGNoYW5nZSB0aGVzZSBzYW1lIGFsaWFzZXMgaW4gLmZsb3djb25maWdcbiAgICAgICAgICAgIC8vICEgTm90ZSB0aGF0IHlvdSBtdXN0IGFsc28gY2hhbmdlIHRoZXNlIHNhbWUgYWxpYXNlcyBpbiBwYWNrYWdlLmpzb24gKGplc3QpXG4gICAgICAgICAgICBjb25maWcucmVzb2x2ZS5hbGlhcyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZy5yZXNvbHZlLmFsaWFzLCB7XG4gICAgICAgICAgICAgICAgdW5pdmVyc2U6IHBhdGhzLnVuaXZlcnNlLFxuICAgICAgICAgICAgICAgIG11bHRpdmVyc2U6IHBhdGhzLm11bHRpdmVyc2UsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYoaXNTZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICAvLyA/IEFkZCByZWZlcmVuY2VkIGVudmlyb25tZW50IHZhcmlhYmxlcyBkZWZpbmVkIGluIC5lbnYgdG8gYnVuZGxlXG4gICAgICAgICAgICAgICAgY29uZmlnLnBsdWdpbnMucHVzaChuZXcgRG90ZW52V2VicGFja1BsdWdpbigpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbiJdfQ==