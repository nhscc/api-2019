"use strict";

var _bundleAnalyzer = _interopRequireDefault(require("@next/bundle-analyzer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('./src/dev-utils').populateEnv();

const paths = {
  universe: `${__dirname}/src/`,
  multiverse: `${__dirname}/lib/`
};

module.exports = () => {
  return (0, _bundleAnalyzer.default)({
    enabled: process.env.ANALYZE === 'true'
  })({
    distDir: 'build',
    webpack: config => {
      config.resolve && (config.resolve.alias = { ...config.resolve.alias,
        universe: paths.universe,
        multiverse: paths.multiverse
      });
      return config;
    },
    env: {
      MAX_LIMIT: process.env.MAX_LIMIT,
      IGNORE_RATE_LIMITS: process.env.IGNORE_RATE_LIMITS,
      LOCKOUT_ALL_KEYS: process.env.LOCKOUT_ALL_KEYS,
      DISALLOWED_METHODS: process.env.DISALLOWED_METHODS,
      REQUESTS_PER_CONTRIVED_ERROR: process.env.REQUESTS_PER_CONTRIVED_ERROR,
      MAX_OPTIONS_PER_ELECTION: process.env.MAX_OPTIONS_PER_ELECTION,
      MAX_RANKINGS_PER_ELECTION: process.env.MAX_RANKINGS_PER_ELECTION,
      MAX_CONTENT_LENGTH_BYTES: process.env.MAX_CONTENT_LENGTH_BYTES
    },
    experimental: {
      async rewrites() {
        return [{
          source: '/api',
          destination: '/404'
        }, {
          source: '/api/v1',
          destination: '/404'
        }, {
          source: '/api/v1/election',
          destination: '/404'
        }, {
          source: '/api/v2',
          destination: '/404'
        }, {
          source: '/v1/meta',
          destination: '/api/v1/meta'
        }, {
          source: '/v1/elections',
          destination: '/api/v1/elections'
        }, {
          source: '/v1/election/:id',
          destination: '/api/v1/election/:id'
        }, {
          source: '/v1/election/:id/voters',
          destination: '/api/v1/election/:id/voters'
        }];
      }

    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9uZXh0LmNvbmZpZy50cyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicG9wdWxhdGVFbnYiLCJwYXRocyIsInVuaXZlcnNlIiwiX19kaXJuYW1lIiwibXVsdGl2ZXJzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbmFibGVkIiwicHJvY2VzcyIsImVudiIsIkFOQUxZWkUiLCJkaXN0RGlyIiwid2VicGFjayIsImNvbmZpZyIsInJlc29sdmUiLCJhbGlhcyIsIk1BWF9MSU1JVCIsIklHTk9SRV9SQVRFX0xJTUlUUyIsIkxPQ0tPVVRfQUxMX0tFWVMiLCJESVNBTExPV0VEX01FVEhPRFMiLCJSRVFVRVNUU19QRVJfQ09OVFJJVkVEX0VSUk9SIiwiTUFYX09QVElPTlNfUEVSX0VMRUNUSU9OIiwiTUFYX1JBTktJTkdTX1BFUl9FTEVDVElPTiIsIk1BWF9DT05URU5UX0xFTkdUSF9CWVRFUyIsImV4cGVyaW1lbnRhbCIsInJld3JpdGVzIiwic291cmNlIiwiZGVzdGluYXRpb24iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFPQUEsT0FBTyxDQUFDLGlCQUFELENBQVAsQ0FBMkJDLFdBQTNCOztBQUVBLE1BQU1DLEtBQUssR0FBRztBQUNWQyxFQUFBQSxRQUFRLEVBQUcsR0FBRUMsU0FBVSxPQURiO0FBRVZDLEVBQUFBLFVBQVUsRUFBRyxHQUFFRCxTQUFVO0FBRmYsQ0FBZDs7QUFLQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE1BQWM7QUFDM0IsU0FBTyw2QkFBbUI7QUFDdEJDLElBQUFBLE9BQU8sRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE9BQVosS0FBd0I7QUFEWCxHQUFuQixFQUVKO0FBRUNDLElBQUFBLE9BQU8sRUFBRSxPQUZWO0FBT0NDLElBQUFBLE9BQU8sRUFBR0MsTUFBRCxJQUEyQjtBQUloQ0EsTUFBQUEsTUFBTSxDQUFDQyxPQUFQLEtBQW1CRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsS0FBZixHQUF1QixFQUN0QyxHQUFHRixNQUFNLENBQUNDLE9BQVAsQ0FBZUMsS0FEb0I7QUFFdENiLFFBQUFBLFFBQVEsRUFBRUQsS0FBSyxDQUFDQyxRQUZzQjtBQUd0Q0UsUUFBQUEsVUFBVSxFQUFFSCxLQUFLLENBQUNHO0FBSG9CLE9BQTFDO0FBTUEsYUFBT1MsTUFBUDtBQUNILEtBbEJGO0FBdUJDSixJQUFBQSxHQUFHLEVBQUU7QUFDRE8sTUFBQUEsU0FBUyxFQUFFUixPQUFPLENBQUNDLEdBQVIsQ0FBWU8sU0FEdEI7QUFFREMsTUFBQUEsa0JBQWtCLEVBQUVULE9BQU8sQ0FBQ0MsR0FBUixDQUFZUSxrQkFGL0I7QUFHREMsTUFBQUEsZ0JBQWdCLEVBQUVWLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUyxnQkFIN0I7QUFJREMsTUFBQUEsa0JBQWtCLEVBQUVYLE9BQU8sQ0FBQ0MsR0FBUixDQUFZVSxrQkFKL0I7QUFLREMsTUFBQUEsNEJBQTRCLEVBQUVaLE9BQU8sQ0FBQ0MsR0FBUixDQUFZVyw0QkFMekM7QUFNREMsTUFBQUEsd0JBQXdCLEVBQUViLE9BQU8sQ0FBQ0MsR0FBUixDQUFZWSx3QkFOckM7QUFPREMsTUFBQUEseUJBQXlCLEVBQUVkLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYSx5QkFQdEM7QUFRREMsTUFBQUEsd0JBQXdCLEVBQUVmLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYztBQVJyQyxLQXZCTjtBQW9DQ0MsSUFBQUEsWUFBWSxFQUFFO0FBQ1YsWUFBTUMsUUFBTixHQUFpQjtBQUNiLGVBQU8sQ0FDSDtBQUNJQyxVQUFBQSxNQUFNLEVBQUUsTUFEWjtBQUVJQyxVQUFBQSxXQUFXLEVBQUU7QUFGakIsU0FERyxFQUtIO0FBQ0lELFVBQUFBLE1BQU0sRUFBRSxTQURaO0FBRUlDLFVBQUFBLFdBQVcsRUFBRTtBQUZqQixTQUxHLEVBU0g7QUFDSUQsVUFBQUEsTUFBTSxFQUFFLGtCQURaO0FBRUlDLFVBQUFBLFdBQVcsRUFBRTtBQUZqQixTQVRHLEVBYUg7QUFDSUQsVUFBQUEsTUFBTSxFQUFFLFNBRFo7QUFFSUMsVUFBQUEsV0FBVyxFQUFFO0FBRmpCLFNBYkcsRUFpQkg7QUFDSUQsVUFBQUEsTUFBTSxFQUFFLFVBRFo7QUFFSUMsVUFBQUEsV0FBVyxFQUFFO0FBRmpCLFNBakJHLEVBcUJIO0FBQ0lELFVBQUFBLE1BQU0sRUFBRSxlQURaO0FBRUlDLFVBQUFBLFdBQVcsRUFBRTtBQUZqQixTQXJCRyxFQXlCSDtBQUNJRCxVQUFBQSxNQUFNLEVBQUUsa0JBRFo7QUFFSUMsVUFBQUEsV0FBVyxFQUFFO0FBRmpCLFNBekJHLEVBNkJIO0FBQ0lELFVBQUFBLE1BQU0sRUFBRSx5QkFEWjtBQUVJQyxVQUFBQSxXQUFXLEVBQUU7QUFGakIsU0E3QkcsQ0FBUDtBQWtDSDs7QUFwQ1M7QUFwQ2YsR0FGSSxDQUFQO0FBNkVILENBOUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdpdGhCdW5kbGVBbmFseXplciBmcm9tICdAbmV4dC9idW5kbGUtYW5hbHl6ZXInXG5cbmltcG9ydCB0eXBlIHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJ3dlYnBhY2snXG5cbi8vID8gTm90IHVzaW5nIEVTNi9UUyBpbXBvcnQgc3ludGF4IGhlcmUgYmVjYXVzZSBkZXYtdXRpbHMgaGFzIHNwZWNpYWxcbi8vID8gY2lyY3Vtc3RhbmNlc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnJlc29sdmVkLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG5yZXF1aXJlKCcuL3NyYy9kZXYtdXRpbHMnKS5wb3B1bGF0ZUVudigpO1xuXG5jb25zdCBwYXRocyA9IHtcbiAgICB1bml2ZXJzZTogYCR7X19kaXJuYW1lfS9zcmMvYCxcbiAgICBtdWx0aXZlcnNlOiBgJHtfX2Rpcm5hbWV9L2xpYi9gLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoKTogb2JqZWN0ID0+IHtcbiAgICByZXR1cm4gd2l0aEJ1bmRsZUFuYWx5emVyKHtcbiAgICAgICAgZW5hYmxlZDogcHJvY2Vzcy5lbnYuQU5BTFlaRSA9PT0gJ3RydWUnXG4gICAgfSkoe1xuICAgICAgICAvLyA/IFJlbmFtZXMgdGhlIGJ1aWxkIGRpciBcImJ1aWxkXCIgaW5zdGVhZCBvZiBcIi5uZXh0XCJcbiAgICAgICAgZGlzdERpcjogJ2J1aWxkJyxcblxuICAgICAgICAvLyA/IFdlYnBhY2sgY29uZmlndXJhdGlvblxuICAgICAgICAvLyAhIE5vdGUgdGhhdCB0aGUgd2VicGFjayBjb25maWd1cmF0aW9uIGlzIGV4ZWN1dGVkIHR3aWNlOiBvbmNlXG4gICAgICAgIC8vICEgc2VydmVyLXNpZGUgYW5kIG9uY2UgY2xpZW50LXNpZGUhXG4gICAgICAgIHdlYnBhY2s6IChjb25maWc6IENvbmZpZ3VyYXRpb24pID0+IHtcbiAgICAgICAgICAgIC8vID8gVGhlc2UgYXJlIGFsaWFzZXMgdGhhdCBjYW4gYmUgdXNlZCBkdXJpbmcgSlMgaW1wb3J0IGNhbGxzXG4gICAgICAgICAgICAvLyAhIE5vdGUgdGhhdCB5b3UgbXVzdCBhbHNvIGNoYW5nZSB0aGVzZSBzYW1lIGFsaWFzZXMgaW4gdHNjb25maWcuanNvblxuICAgICAgICAgICAgLy8gISBOb3RlIHRoYXQgeW91IG11c3QgYWxzbyBjaGFuZ2UgdGhlc2Ugc2FtZSBhbGlhc2VzIGluIHBhY2thZ2UuanNvbiAoamVzdClcbiAgICAgICAgICAgIGNvbmZpZy5yZXNvbHZlICYmIChjb25maWcucmVzb2x2ZS5hbGlhcyA9IHtcbiAgICAgICAgICAgICAgICAuLi5jb25maWcucmVzb2x2ZS5hbGlhcyxcbiAgICAgICAgICAgICAgICB1bml2ZXJzZTogcGF0aHMudW5pdmVyc2UsXG4gICAgICAgICAgICAgICAgbXVsdGl2ZXJzZTogcGF0aHMubXVsdGl2ZXJzZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vID8gU2VsZWN0IHNvbWUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGRlZmluZWQgaW4gLmVudiB0byBwdXNoIHRvIHRoZVxuICAgICAgICAvLyA/IGNsaWVudC5cbiAgICAgICAgLy8gISEgRE8gTk9UIFBVVCBBTlkgU0VDUkVUIEVOVklST05NRU5UIFZBUklBQkxFUyBIRVJFICEhXG4gICAgICAgIGVudjoge1xuICAgICAgICAgICAgTUFYX0xJTUlUOiBwcm9jZXNzLmVudi5NQVhfTElNSVQsXG4gICAgICAgICAgICBJR05PUkVfUkFURV9MSU1JVFM6IHByb2Nlc3MuZW52LklHTk9SRV9SQVRFX0xJTUlUUyxcbiAgICAgICAgICAgIExPQ0tPVVRfQUxMX0tFWVM6IHByb2Nlc3MuZW52LkxPQ0tPVVRfQUxMX0tFWVMsXG4gICAgICAgICAgICBESVNBTExPV0VEX01FVEhPRFM6IHByb2Nlc3MuZW52LkRJU0FMTE9XRURfTUVUSE9EUyxcbiAgICAgICAgICAgIFJFUVVFU1RTX1BFUl9DT05UUklWRURfRVJST1I6IHByb2Nlc3MuZW52LlJFUVVFU1RTX1BFUl9DT05UUklWRURfRVJST1IsXG4gICAgICAgICAgICBNQVhfT1BUSU9OU19QRVJfRUxFQ1RJT046IHByb2Nlc3MuZW52Lk1BWF9PUFRJT05TX1BFUl9FTEVDVElPTixcbiAgICAgICAgICAgIE1BWF9SQU5LSU5HU19QRVJfRUxFQ1RJT046IHByb2Nlc3MuZW52Lk1BWF9SQU5LSU5HU19QRVJfRUxFQ1RJT04sXG4gICAgICAgICAgICBNQVhfQ09OVEVOVF9MRU5HVEhfQllURVM6IHByb2Nlc3MuZW52Lk1BWF9DT05URU5UX0xFTkdUSF9CWVRFUyxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoZXNlIG91dCBvZiBleHBlcmltZW50YWwgd2hlbiB0aGV5J3JlIG5vdCBleHBlcmltZW50YWxcbiAgICAgICAgLy8gVE9ETzogYW55bW9yZSFcbiAgICAgICAgZXhwZXJpbWVudGFsOiB7XG4gICAgICAgICAgICBhc3luYyByZXdyaXRlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICcvYXBpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiAnLzQwNCcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJy9hcGkvdjEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246ICcvNDA0JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnL2FwaS92MS9lbGVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogJy80MDQnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICcvYXBpL3YyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiAnLzQwNCcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJy92MS9tZXRhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiAnL2FwaS92MS9tZXRhJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICcvdjEvZWxlY3Rpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiAnL2FwaS92MS9lbGVjdGlvbnMnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJy92MS9lbGVjdGlvbi86aWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246ICcvYXBpL3YxL2VsZWN0aW9uLzppZCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnL3YxL2VsZWN0aW9uLzppZC92b3RlcnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246ICcvYXBpL3YxL2VsZWN0aW9uLzppZC92b3RlcnMnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59O1xuIl19