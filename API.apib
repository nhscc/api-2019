FORMAT: 1A
HOST: https://elections.api.hscc.bdpa.org/v1

# BDPA Elections API

Based on [simple REST
principles](https://searchapparchitecture.techtarget.com/definition/RESTful-API),
the BDPA Elections API returns JSON data responses to requests. This is the API
used by teams and their apps for the 2019 BDPA National High School Computer
Competition. It holds all of the election data teams' apps must query and
update. The API is live and will ideally remain online indefinitely.

The base address of BDPA Elections API is https://elections.api.hscc.bdpa.org/X
where `X` is the version of the API you want to use. There is currently only one
version, so `X = v1`. Each version of the API provides a set of endpoints with
their own unique path and requirements.

[The source code behind the API is available on
GitHub](https://github.com/nhscc/elections.api.hscc.bdpa.org). If you have any
troubles, please open an issue there.

## Requesting a key

To access the majority of this API's endpoints requires a key. If your team
wants a key, or needs to replace a lost or stolen key, please contact NHSCC
staff through Slack or [open an issue on
GitHub](https://github.com/nhscc/elections.api.hscc.bdpa.org).

When you get your key, include it in your requests' header as `key:
your-api-key-here` and you will be immediately authenticated into the system.

## Rules of API access

1. Do not bombard the API with requests or you risk permanent IP/subnet ban.
   **Limit your apps to no more than 10 requests per second per API key**. If
   your app ends up sending too many requests over some time period, you'll get
   a `HTTP 429` response along with a monotonically increasing soft ban
   (starting at 5 minutes). Similarly, the size of requests is strictly limited,
   so you must limit the amount of data you're sending. When you send a request
   that is too large (>100KB), it will fail with a `HTTP 413` response.

2. **Do not reveal your API key to anyone** not on your own team. It is how the
   API identifies your team. Do not upload it to GitHub or leave it lying around
   in your source code. Save it to a file and `.gitignore` it or save it to an
   environment variable.

3. Since the API is live, that also means you will be able to see and interact
   with content posted by other teams. Please do not post anything
   inappropriate. You will only be able to modify your own content, but you will
   be able to pull down and view any other team's election data.

4. If you encounter any vulnerabilities, errors, or other issues, contact NHSCC
   staff via Slack or [open an issue on
   GitHub](https://github.com/nhscc/elections.api.hscc.bdpa.org). For
   significant enough finds, bonus points may be awarded. On the other hand,
   abusing any vulnerability or bug may result in disqualification.

5. **The API was built to randomly return errors every so often**. That means
   your app must be prepared to deal with `HTTP 555` and other bad responses.
   However, if you're consistently getting `HTTP 5xx` errors back to back, then
   something is wrong. Please report this if it happens.

6. All responses are raw JSON. All request payloads must be sent as raw JSON.
   `JSON.stringify()` and `JSON.parse()` or whatever language equivalent is
   available to you is your friend!

## Request methods

This API is based on [simple REST
principles](https://searchapparchitecture.techtarget.com/definition/RESTful-API).
Resources are accessed via standard HTTPS requests in UTF-8 format to an API
endpoint. This API understands the following HTTP request methods:

| METHOD | MEANING |
|-----   |-----    |
| GET    | Return data about one or more elections |
| POST   | Create a new election                   |
| PUT    | Modify data about an election           |
| DELETE | Delete an election                      |

## Globally Unique Election IDs

To retrieve data about an election, you must know that election's ID. Election
IDs are globally unique within the API. That is: no two elections will ever have
the same ID, even across different teams. Use this fact to your advantage.

## Rate Limits

As said earlier, do not bombard the API with requests. If you do, the API will
soft ban you for five minutes the first time before accepting requests from your
API key or IP address again. Each following time this happens within a certain
period, your ban time will double.

So **limit your apps to no more than 10 requests per second per API key**. You
know you've been soft banned if you receive an `HTTP 429` response. Check the
JSON response for the `retryAfter` key, which holds a number representing how
long your API key and IP are banned from making further requests (in seconds).

## Pagination

Endpoints that return data for multiple elections are paginated. Such endpoints
optionally accept a `limit` and `after` parameters. `limit` is a number telling
the API how many elections you want returned as part of your response (see
below). `after` is a *MongoDB ObjectId* that determines which item is returned
first.

`limit`s larger than 50 will be rejected. `after`s are special strings and not
numbers. Omitting the `after` parameter returns the first `limit<=50` elements.
`limit` must be a non-negative integer.

For example, given the following dataset and a default limit of 3 (max 10):

```JavaScript
[
    { item_id: 0xabc123, name: 'Item 1 name' },
    { item_id: 0xabc124, name: 'Item 2 name' },
    { item_id: 0xabc125, name: 'Item 3 name' },
    { item_id: 0xabc126, name: 'Item 4 name' },
    { item_id: 0xabc127, name: 'Item 5 name' },
]
```

Paginated results:

`limit=0`: 0 items returned  
`limit=1`: an array with only the first item is returned  
`limit=5`: an array of 5 items is returned (the whole dataset!)  
`limit=10`: since there are only 5 items total, same as the previous result  
`limit=10, after=0xabc123`: same as the previous result  
`limit=2, after=0xabc124`: returns an array with 2 items: *0xabc125* and *0xabc126*  
`limit=1, after=0xabc127`: returns an array with 0 items since there is nothing after *0xabc127*  
`after=0xabc124`: returns an array with the default limit of 3 items: *0xabc125* through *0xabc127*  
`limit=0, after=0xabc123`: same as the very first result  

## Status Codes

The Elections API will issue responses with one of the following status codes:

| STATUS | MEANING |
|-----   |-----    |
| 200    | Your request completed successfully. |
| 400    | Your request was malformed or otherwise bad. Check the requirements. |
| 401    | Session is not authenticated. Put your API key in the header! |
| 403    | Session is not authorized. You tried to do something you can't do. |
| 404    | The resource (or endpoint) was not found. Check your syntax. |
| 405    | Bad method. The endpoint does not support your request's method. |
| 413    | Your request was too large and was dropped. Max body size is 100KB. |
| 429    | You've been rate limited. Try your request again after a few minutes. |
| 5xx    | Something happened on the server that is outside your control. |

## Response Schema

All responses issued by the API will follow one of the two following schemas.

### Success Schema

When a request you've issued succeeds, the response will look like the
following:

```json
{
    "success": "true",
    // any other data you requested
}
```

Note that all time data is represented as the number of milliseconds elapsed
since January 1, 1970 00:00:00 UTC, or the same thing that is returned by
JavaScript's `Date.now()` method.

### Error Schema

When a request you've issued fails, along with the non-200 status code, the
response will look like the following:

```json
{
    "error": "an error message describing what went wrong",
    // any other relevant data (like retryAfter)
}
```

## CORS: Cross-Origin Resource Sharing

The API does not supports Cross Origin Resource Sharing (CORS) for AJAX requests
at the moment. If this is a problem, please contact HSCC staff via Slack or
[open an issue on GitHub](https://github.com/nhscc/elections.api.hscc.bdpa.org).

## Tips for debugging

- Are you using the right method?
- Use [Postman](https://www.postman.com/) (or this documentation) to play with the API.
- Expect raw JSON that you must parse manually, not raw text or something else.
- Are you sending properly formatted JSON as your request payload when necessary?
- Elections in the system created by a specific API key are owned exclusively by that key. To put that another way: you cannot modify elections that do not belong to you. You can only view them.
- Try outputting to stdout, use `console.log`, or output to some log file when API requests are made and responses received.
- Elections are returned in FIFO (first-election-in-is-the-first-election-out) ascending/queue order.
- All time data is represented as the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.
- Are you provided the correct headers? You need to specify the `key: your-api-key-here` header for all requests, and the `'content-type': 'application/json'` header when making POST and PUT requests.

## Metadata endpoint [/meta]

This endpoint deals with summary metadata about all elections in the system (deleted elections are excluded).

### Return metadata about the system [GET]

+ Request

    + Headers

            key: your-special-api-key-here
            content-type: application/json

+ Response 200 (application/json)

    + Attributes (object)
        + success (boolean) - If the request succeeded. Always `true` when status code is 200 and `false` or `undefined` otherwise.
        + upcomingElections (number) - Total number of elections not yet open.
        + openElections (number) - Total number of elections currently open.
        + closedElections (number) - Total number of elections that have closed.

    + Body

            {
                "success": true,
                "upcomingElections": 12,
                "openElections": 20,
                "closedElections": 423
            }

+ Response 401 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "invalid API key encountered"
            }

+ Response 429 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + retryAfter (number) - Number of seconds your app should wait before sending another request.

    + Body

            {
                "error": "session is rate limited",
                "retryAfter": 900
            }

+ Response 555 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + contrived (boolean) - If there was no actual error (fake error). Always `true` when status code is 555 and `false` or `undefined` otherwise. (real 5xx errors likely won't return any JSON at all).

    + Body

            {
                "error": "(do not report this)",
                "contrived": true
            }

## Elections endpoint [/elections{?limit,after}]

This endpoint deals with all elections data currently in the system.

> Warning: An `HTTP 400` error response is returned when specifying a `limit` larger than 50 or when including `limit` or `after` query parameters in a non-GET request, both of which are not allowed.

### List all elections in the system [GET]

+ Parameters
    + limit (optional, number) - [optional] Maximum number of elections returned (less than or equal to 50).
        + Default: `15`
    + after (optional, number) - [optional] The `election_id` of the election that exists just before the first returned election in the result list, if it exists.
        + Default: `null`

+ Request

    + Headers

            key: your-special-api-key-here
            content-type: application/json

+ Response 200 (application/json)

    + Attributes (object)
        + success (boolean) - If the request succeeded. Always `true` when status code is 200 and `false` or `undefined` otherwise.
        + elections (array[Election]) - An array of elections. Empty if there are no more elections in system.

    + Body

            {
                "success": true,
                "elections": [
                    {
                        "election_id": "5ec8adf06e38137ff2e5876f",
                        "title": "My election #1",
                        "description": "My demo election!",
                        "options": [],
                        "created": 1589347376211,
                        "opens": 1589347379811,
                        "closes": 1589347380731,
                        "owned": true,
                        "deleted": false
                    },
                    {
                        "election_id": "5ec8adf06e38137ff2e5876e",
                        "title": "My election #2",
                        "description": "A custom election I made",
                        "options": ["Option 1", "Option 2"],
                        "created": 1589347376211,
                        "opens": 1589347379811,
                        "closes": 1589347380731,
                        "owned": false,
                        "deleted": true
                    },
                    {
                        "election_id": "5ec8adf06e38137ff2e5876d",
                        "title": "My election #3",
                        "description": "An election to end all elections?",
                        "options": ["Vanilla", "Chocolate"],
                        "created": 1589347376211,
                        "opens": 1589347379811,
                        "closes": 1589347380731,
                        "owned": true,
                        "deleted": false
                    }
                ]
            }

+ Response 400 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "<error concerning parsing, syntax, JSON, formatting, bad key-values, etc>"
            }

+ Response 401 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "invalid API key encountered"
            }

+ Response 429 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + retryAfter (number) - Number of seconds your app should wait before sending another request.

    + Body

            {
                "error": "session is rate limited",
                "retryAfter": 900
            }

+ Response 555 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + contrived (boolean) - If there was no actual error (fake error). Always `true` when status code is 555 and `false` or `undefined` otherwise. (real 5xx errors likely won't return any JSON at all).

    + Body

            {
                "error": "(do not report this)",
                "contrived": true
            }

### Create a new election [POST]

+ Request

    + Headers

            key: your-special-api-key-here
            content-type: application/json

    + Attributes (object)
        - title: My Election (string) - Title of the election.
        + description: Election description (string) - [optional] Description of the election.
        + options (array[string]) - [optional] Array of options voters are allowed to select from. Example: `["Biden","Sanders"]`
        + opens: 1589346000600 (number) - When this election opens for voting [unix epoch seconds]. Always smaller than `closes`.
        + closes: 1589346900600 (number) - When this election closes to voting [unix epoch seconds]. Always larger than `opens`.

    + Body

            {
                "title": "My election #4",
                "description": "Posting a new election, look at me!",
                "options": ["Option A", "Option B", "Option C"],
                "created": 1589347376211,
                "opens": 1589347379811,
                "closes": 1589347380731,
            }

+ Response 200 (application/json)

    + Attributes (object)
        + success: true (boolean) - If the request succeeded. Always `true` when status code is 200 and `false` or `undefined` otherwise.
        + election_id: `ac166a46-8a89-4556-8fa0-7e6919a536b5` (string) - The unique MongoDB id of the newly created election.

    + Body

            {
                "success": true,
                "election_id": "5ec8adf06e38137ff2e5876c"
            }

+ Response 400 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "<error concerning parsing, syntax, JSON, formatting, bad key-values, etc>"
            }

+ Response 401 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "invalid API key encountered"
            }

+ Response 429 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + retryAfter (number) - Number of seconds your app should wait before sending another request.

    + Body

            {
                "error": "session is rate limited",
                "retryAfter": 900
            }

+ Response 555 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + contrived (boolean) - If there was no actual error (fake error). Always `true` when status code is 555 and `false` or `undefined` otherwise. (real 5xx errors likely won't return any JSON at all).

    + Body

            {
                "error": "(do not report this)",
                "contrived": true
            }

## Election endpoint [/election/{election_id}]

This endpoint returns an expanded data object describing the election specified via **election_id**.

+ Parameters
    + election_id (string) - The unique MongoDB id of the election targeted by some operation.

### Return data about an election [GET]

+ Request

    + Headers

            key: your-special-api-key-here
            content-type: application/json

+ Response 200 (application/json)

    + Attributes (Election)
        + success: true (boolean) - If the request succeeded. Always `true` when status code is 200 and `false` or `undefined` otherwise.

    + Body

            {
                "success": true,
                "election_id": "5ec8adf06e38137ff2e5876b",
                "title": "My election #2",
                "description": "A custom election I made",
                "options": ["Option 1", "Option 2"],
                "created": 1589347376211,
                "opens": 1589347379811,
                "closes": 1589347380731,
                "owned": false,
                "deleted": true
            }

+ Response 401 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "invalid API key encountered"
            }

+ Response 429 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + retryAfter (number) - Number of seconds your app should wait before sending another request.

    + Body

            {
                "error": "session is rate limited",
                "retryAfter": 900
            }

+ Response 555 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + contrived (boolean) - If there was no actual error (fake error). Always `true` when status code is 555 and `false` or `undefined` otherwise. (real 5xx errors likely won't return any JSON at all).

    + Body

            {
                "error": "(do not report this)",
                "contrived": true
            }

### Merge data into an existing election [PUT]

+ Request

    + Headers

            key: your-special-api-key-here
            content-type: application/json

    + Attributes (object)
        + title: My Election (string) - [optional] Title of the election.
        + description: Election description (string) - [optional] Description of the election.
        + options (array[string]) - [optional] Array of options voters are allowed to select from. Example: `["Biden","Sanders"]`
        + opens: 1589346000600 (number) - [optional] When this election opens for voting [unix epoch seconds]. Always smaller than `closes`.
        + closes: 1589346900600 (number) - [optional] When this election closes to voting [unix epoch seconds]. Always larger than `opens`.

    + Body

            {
                "description": "Posting a new election, look at me!",
                "options": ["Option A", "Option B", "Option C"]
            }

+ Response 200 (application/json)

    + Attributes (object)
        + success: true (boolean) - If the request succeeded. Always `true` when status code is 200 and `false` or `undefined` otherwise.

    + Body

            {
                "success": true
            }

+ Response 400 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "<error concerning parsing, syntax, JSON, formatting, bad key-values, etc>"
            }

+ Response 401 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "invalid API key encountered"
            }

+ Response 403 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "session can only mutate own elections"
            }

+ Response 429 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + retryAfter (number) - Number of seconds your app should wait before sending another request.

    + Body

            {
                "error": "session is rate limited",
                "retryAfter": 900
            }

+ Response 555 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + contrived (boolean) - If there was no actual error (fake error). Always `true` when status code is 555 and `false` or `undefined` otherwise. (real 5xx errors likely won't return any JSON at all).

    + Body

            {
                "error": "(do not report this)",
                "contrived": true
            }

### Delete an election [DELETE]

+ Request

    + Headers

            key: your-special-api-key-here
            content-type: application/json

+ Response 200 (application/json)

    + Attributes (object)
        + success: true (boolean) - If the request succeeded. Always `true` when status code is 200 and `false` or `undefined` otherwise.

    + Body

            {
                "success": true
            }

+ Response 401 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "invalid API key encountered"
            }

+ Response 403 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "session can only delete own elections"
            }

+ Response 429 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + retryAfter (number) - Number of seconds your app should wait before sending another request.

    + Body

            {
                "error": "session is rate limited",
                "retryAfter": 900
            }

+ Response 555 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + contrived (boolean) - If there was no actual error (fake error). Always `true` when status code is 555 and `false` or `undefined` otherwise. (real 5xx errors likely won't return any JSON at all).

    + Body

            {
                "error": "(do not report this)",
                "contrived": true
            }

## Voters endpoint [/election/{election_id}/voters]

This endpoint deals with an election's mappings between voter IDs and rankings (votes).

+ Parameters
    + election_id (string) - The unique MongoDB id of the election targeted by some operation.

### Return an election's mapping of voters to rankings [GET]

+ Request

    + Headers

            key: your-special-api-key-here
            content-type: application/json

+ Response 200 (application/json)

    + Attributes (object)
        + success: true (boolean) - If the request succeeded. Always `true` when status code is 200 and `false` or `undefined` otherwise.
        + votes: `{"voter_id":"1","ranking":["Biden", "Sanders"]}`,`{"voter_id":"2","ranking":["Sanders", "Biden"]}` (array[Vote]) - Array of objects each mapping a app-local voter ID to an election's option.

    + Body

            {
                "success": true,
                "votes": [
                    {"voter_id":"1","ranking":["Biden", "Warren", "Sanders"]},
                    {"voter_id":"2","ranking":["Sanders", "Warren", "Biden"]},
                    {"voter_id":"3","ranking":["Warren", "Sanders", "Biden"]},
                    {"voter_id":"4","ranking":["Warren", "Biden", "Sanders"]}
                ]
            }

+ Response 401 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "invalid API key encountered"
            }

+ Response 429 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + retryAfter (number) - Number of seconds your app should wait before sending another request.

    + Body

            {
                "error": "session is rate limited",
                "retryAfter": 900
            }

+ Response 555 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + contrived (boolean) - If there was no actual error (fake error). Always `true` when status code is 555 and `false` or `undefined` otherwise. (real 5xx errors likely won't return any JSON at all).

    + Body

            {
                "error": "(do not report this)",
                "contrived": true
            }

### Replace an election's mapping of voters to rankings [PUT]

+ Request

    + Headers

            key: your-special-api-key-here
            content-type: application/json

    + Body

            {
                "votes": [
                    {"voter_id": "voter1@email.com", "ranking": ["Vanilla", "Chocolate"]},
                    {"voter_id": "voter2@email.com", "ranking": ["Chocolate", "Vanilla"]},
                    {"voter_id": "voter3@email.com", "ranking": ["Vanilla", "Chocolate"]}
                ]
            }

+ Response 200 (application/json)

    + Attributes (object)
        + success: true (boolean) - If the request succeeded. Always `true` when status code is 200 and `false` or `undefined` otherwise.

    + Body

            {
                "success": true
            }

+ Response 400 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "<error concerning parsing, syntax, JSON, formatting, bad key-values, etc>"
            }

+ Response 401 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "invalid API key encountered"
            }

+ Response 403 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.

    + Body

            {
                "error": "session can only mutate own elections"
            }

+ Response 429 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + retryAfter (number) - Number of seconds your app should wait before sending another request.

    + Body

            {
                "error": "session is rate limited",
                "retryAfter": 900
            }

+ Response 555 (application/json)

    + Attributes (object)
        + error (string) - Why the request failed.
        + contrived (boolean) - If there was no actual error (fake error). Always `true` when status code is 555 and `false` or `undefined` otherwise. (real 5xx errors likely won't return any JSON at all).

    + Body

            {
                "error": "(do not report this)",
                "contrived": true
            }

## Data Structures

### Election (object)

+ election_id: `5ec8adf06e38137ff2e58769` (string) - unique MongoDB id representing the election. Generated automatically by the server.
+ title: My Election (string) - Title of the election.
+ description: Election description (string) - Description of the election.
+ options (array[string]) - Array of options voters are allowed to select from. Example: `["Biden","Sanders"]`
+ created: 1589345900650  (number) - When this election was created [unix epoch seconds]. Generated automatically by the server.
+ opens: 1589346000600 (number) - When this election opens for voting [unix epoch seconds]. Always smaller than `closes`.
+ closes: 1589346900600 (number) - When this election closes to voting [unix epoch seconds]. Always larger than `opens`.
+ owned: true (boolean) - If the API `Key` making the request created this election or not.
+ deleted: false (boolean) - If this election has been marked as deleted.

### Vote (object)

+ voter_id: myemail@me.com (string) - A unique (relative to your app) identifier representing a voter in your own system. This can be whatever string you'd like it to be.
+ ranking: `"Biden"`,`"Sanders"` (array[string]) - Whichever ranked choices the voter represented by `voter_id` made when casting their vote. From left to right, the order of the array represents the ranking users' chose from most preferred to least preferred.
